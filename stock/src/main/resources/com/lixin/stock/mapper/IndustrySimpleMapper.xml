<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lixin.stock.mapper.IndustrySimpleMapper">
    <resultMap id="BaseResultMap" type="com.lixin.stock.model.IndustrySimple">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="plate" jdbcType="VARCHAR" property="plate"/>
        <result column="first_name" jdbcType="VARCHAR" property="firstName"/>
        <result column="second_name" jdbcType="VARCHAR" property="secondName"/>
        <result column="level2code" jdbcType="VARCHAR" property="level2code"/>
        <result column="titie" jdbcType="VARCHAR" property="titie"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, plate, first_name, second_name, level2code, titie
    </sql>
    <select id="selectByExample" parameterType="com.lixin.stock.model.IndustrySimpleExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from industry_simple
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from industry_simple
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from industry_simple
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.lixin.stock.model.IndustrySimpleExample">
        delete from industry_simple
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.lixin.stock.model.IndustrySimple">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into industry_simple (plate, first_name, second_name,
        level2code, titie)
        values (#{plate,jdbcType=VARCHAR}, #{firstName,jdbcType=VARCHAR}, #{secondName,jdbcType=VARCHAR},
        #{level2code,jdbcType=VARCHAR}, #{titie,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.lixin.stock.model.IndustrySimple">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into industry_simple
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="plate != null">
                plate,
            </if>
            <if test="firstName != null">
                first_name,
            </if>
            <if test="secondName != null">
                second_name,
            </if>
            <if test="level2code != null">
                level2code,
            </if>
            <if test="titie != null">
                titie,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="plate != null">
                #{plate,jdbcType=VARCHAR},
            </if>
            <if test="firstName != null">
                #{firstName,jdbcType=VARCHAR},
            </if>
            <if test="secondName != null">
                #{secondName,jdbcType=VARCHAR},
            </if>
            <if test="level2code != null">
                #{level2code,jdbcType=VARCHAR},
            </if>
            <if test="titie != null">
                #{titie,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.lixin.stock.model.IndustrySimpleExample" resultType="java.lang.Long">
        select count(*) from industry_simple
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update industry_simple
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.plate != null">
                plate = #{record.plate,jdbcType=VARCHAR},
            </if>
            <if test="record.firstName != null">
                first_name = #{record.firstName,jdbcType=VARCHAR},
            </if>
            <if test="record.secondName != null">
                second_name = #{record.secondName,jdbcType=VARCHAR},
            </if>
            <if test="record.level2code != null">
                level2code = #{record.level2code,jdbcType=VARCHAR},
            </if>
            <if test="record.titie != null">
                titie = #{record.titie,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update industry_simple
        set id = #{record.id,jdbcType=INTEGER},
        plate = #{record.plate,jdbcType=VARCHAR},
        first_name = #{record.firstName,jdbcType=VARCHAR},
        second_name = #{record.secondName,jdbcType=VARCHAR},
        level2code = #{record.level2code,jdbcType=VARCHAR},
        titie = #{record.titie,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.lixin.stock.model.IndustrySimple">
        update industry_simple
        <set>
            <if test="plate != null">
                plate = #{plate,jdbcType=VARCHAR},
            </if>
            <if test="firstName != null">
                first_name = #{firstName,jdbcType=VARCHAR},
            </if>
            <if test="secondName != null">
                second_name = #{secondName,jdbcType=VARCHAR},
            </if>
            <if test="level2code != null">
                level2code = #{level2code,jdbcType=VARCHAR},
            </if>
            <if test="titie != null">
                titie = #{titie,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lixin.stock.model.IndustrySimple">
        update industry_simple
        set plate       = #{plate,jdbcType=VARCHAR},
            first_name  = #{firstName,jdbcType=VARCHAR},
            second_name = #{secondName,jdbcType=VARCHAR},
            level2code  = #{level2code,jdbcType=VARCHAR},
            titie       = #{titie,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>