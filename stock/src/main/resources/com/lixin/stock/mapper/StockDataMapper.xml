<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lixin.stock.mapper.StockDataMapper">
  <resultMap id="BaseResultMap" type="com.lixin.stock.model.StockData">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="open_price" jdbcType="DECIMAL" property="openPrice" />
    <result column="close_price" jdbcType="DECIMAL" property="closePrice" />
    <result column="range_price" jdbcType="DECIMAL" property="rangePrice" />
    <result column="range_rate" jdbcType="REAL" property="rangeRate" />
    <result column="lowest_price" jdbcType="DECIMAL" property="lowestPrice" />
    <result column="highest_price" jdbcType="DECIMAL" property="highestPrice" />
    <result column="trade_volume" jdbcType="BIGINT" property="tradeVolume" />
    <result column="trade_money" jdbcType="REAL" property="tradeMoney" />
    <result column="turnover_rate" jdbcType="DECIMAL" property="turnoverRate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, code, time, open_price, close_price, range_price, range_rate, lowest_price, highest_price, 
    trade_volume, trade_money, turnover_rate
  </sql>
  <select id="selectByExample" parameterType="com.lixin.stock.model.StockDataExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stock_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from stock_data
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from stock_data
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixin.stock.model.StockDataExample">
    delete from stock_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixin.stock.model.StockData">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
      insert into stock_data (code, time, open_price,
      close_price, range_price, range_rate,
      lowest_price, highest_price, trade_volume,
      trade_money, turnover_rate)
      values (#{code,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{openPrice,jdbcType=DECIMAL},
      #{closePrice,jdbcType=DECIMAL}, #{rangePrice,jdbcType=DECIMAL}, #{rangeRate,jdbcType=REAL},
      #{lowestPrice,jdbcType=DECIMAL}, #{highestPrice,jdbcType=DECIMAL}, #{tradeVolume,jdbcType=BIGINT},
      #{tradeMoney,jdbcType=REAL}, #{turnoverRate,jdbcType=DECIMAL})
  </insert>

    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="false">
        insert into stock_data (code, time, open_price,
        close_price, range_price, range_rate,
        lowest_price, highest_price, trade_volume,
        trade_money, turnover_rate)
        values
        <foreach collection="list" item="data" separator=",">
            (#{data.code,jdbcType=VARCHAR}, #{data.time,jdbcType=TIMESTAMP}, #{data.openPrice,jdbcType=DECIMAL},
            #{data.closePrice,jdbcType=DECIMAL}, #{data.rangePrice,jdbcType=DECIMAL}, #{data.rangeRate,jdbcType=REAL},
            #{data.lowestPrice,jdbcType=DECIMAL}, #{data.highestPrice,jdbcType=DECIMAL},
            #{data.tradeVolume,jdbcType=BIGINT},
            #{data.tradeMoney,jdbcType=REAL}, #{data.turnoverRate,jdbcType=DECIMAL})
        </foreach>

    </insert>

    <insert id="insertSelective" parameterType="com.lixin.stock.model.StockData">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into stock_data
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="code != null">
                code,
            </if>
      <if test="time != null">
        time,
      </if>
      <if test="openPrice != null">
        open_price,
      </if>
      <if test="closePrice != null">
        close_price,
      </if>
      <if test="rangePrice != null">
        range_price,
      </if>
      <if test="rangeRate != null">
        range_rate,
      </if>
      <if test="lowestPrice != null">
        lowest_price,
      </if>
      <if test="highestPrice != null">
        highest_price,
      </if>
      <if test="tradeVolume != null">
        trade_volume,
      </if>
      <if test="tradeMoney != null">
        trade_money,
      </if>
      <if test="turnoverRate != null">
        turnover_rate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="openPrice != null">
        #{openPrice,jdbcType=DECIMAL},
      </if>
      <if test="closePrice != null">
        #{closePrice,jdbcType=DECIMAL},
      </if>
      <if test="rangePrice != null">
        #{rangePrice,jdbcType=DECIMAL},
      </if>
      <if test="rangeRate != null">
        #{rangeRate,jdbcType=REAL},
      </if>
      <if test="lowestPrice != null">
        #{lowestPrice,jdbcType=DECIMAL},
      </if>
      <if test="highestPrice != null">
        #{highestPrice,jdbcType=DECIMAL},
      </if>
      <if test="tradeVolume != null">
        #{tradeVolume,jdbcType=BIGINT},
      </if>
      <if test="tradeMoney != null">
        #{tradeMoney,jdbcType=REAL},
      </if>
      <if test="turnoverRate != null">
        #{turnoverRate,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixin.stock.model.StockDataExample" resultType="java.lang.Long">
    select count(*) from stock_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update stock_data
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.openPrice != null">
        open_price = #{record.openPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.closePrice != null">
        close_price = #{record.closePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.rangePrice != null">
        range_price = #{record.rangePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.rangeRate != null">
        range_rate = #{record.rangeRate,jdbcType=REAL},
      </if>
      <if test="record.lowestPrice != null">
        lowest_price = #{record.lowestPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.highestPrice != null">
        highest_price = #{record.highestPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.tradeVolume != null">
        trade_volume = #{record.tradeVolume,jdbcType=BIGINT},
      </if>
      <if test="record.tradeMoney != null">
        trade_money = #{record.tradeMoney,jdbcType=REAL},
      </if>
      <if test="record.turnoverRate != null">
        turnover_rate = #{record.turnoverRate,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update stock_data
    set id = #{record.id,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=TIMESTAMP},
      open_price = #{record.openPrice,jdbcType=DECIMAL},
      close_price = #{record.closePrice,jdbcType=DECIMAL},
      range_price = #{record.rangePrice,jdbcType=DECIMAL},
      range_rate = #{record.rangeRate,jdbcType=REAL},
      lowest_price = #{record.lowestPrice,jdbcType=DECIMAL},
      highest_price = #{record.highestPrice,jdbcType=DECIMAL},
      trade_volume = #{record.tradeVolume,jdbcType=BIGINT},
      trade_money = #{record.tradeMoney,jdbcType=REAL},
      turnover_rate = #{record.turnoverRate,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixin.stock.model.StockData">
    update stock_data
    <set>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="openPrice != null">
        open_price = #{openPrice,jdbcType=DECIMAL},
      </if>
      <if test="closePrice != null">
        close_price = #{closePrice,jdbcType=DECIMAL},
      </if>
      <if test="rangePrice != null">
        range_price = #{rangePrice,jdbcType=DECIMAL},
      </if>
      <if test="rangeRate != null">
        range_rate = #{rangeRate,jdbcType=REAL},
      </if>
      <if test="lowestPrice != null">
        lowest_price = #{lowestPrice,jdbcType=DECIMAL},
      </if>
      <if test="highestPrice != null">
        highest_price = #{highestPrice,jdbcType=DECIMAL},
      </if>
      <if test="tradeVolume != null">
        trade_volume = #{tradeVolume,jdbcType=BIGINT},
      </if>
      <if test="tradeMoney != null">
        trade_money = #{tradeMoney,jdbcType=REAL},
      </if>
      <if test="turnoverRate != null">
        turnover_rate = #{turnoverRate,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixin.stock.model.StockData">
    update stock_data
    set code = #{code,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      open_price = #{openPrice,jdbcType=DECIMAL},
      close_price = #{closePrice,jdbcType=DECIMAL},
      range_price = #{rangePrice,jdbcType=DECIMAL},
      range_rate = #{rangeRate,jdbcType=REAL},
      lowest_price = #{lowestPrice,jdbcType=DECIMAL},
      highest_price = #{highestPrice,jdbcType=DECIMAL},
      trade_volume = #{tradeVolume,jdbcType=BIGINT},
      trade_money = #{tradeMoney,jdbcType=REAL},
      turnover_rate = #{turnoverRate,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>