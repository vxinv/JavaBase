<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lixin.testweb.dao.FileManagerMapper">
  <resultMap id="BaseResultMap" type="com.lixin.testweb.github.vxinv.model.FileManager">
      <id column="file_id" jdbcType="INTEGER" property="fileId"/>
      <result column="file_name" jdbcType="VARCHAR" property="fileName"/>
      <result column="file_time" jdbcType="TIMESTAMP" property="fileTime"/>
      <result column="user_name" jdbcType="VARCHAR" property="userName"/>
      <result column="file_key" jdbcType="VARCHAR" property="fileKey"/>
      <result column="file_size" jdbcType="INTEGER" property="fileSize"/>
      <result column="file_class" jdbcType="VARCHAR" property="fileClass"/>
      <result column="file_second_class" jdbcType="VARCHAR" property="fileSecondClass"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    file_id, file_name, file_time, user_name, file_key, file_size, file_class, file_second_class
  </sql>
    <select id="selectByExample" parameterType="com.lixin.testweb.github.vxinv.model.FileManagerExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from file_manager
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
      select
    <include refid="Base_Column_List" />
    from file_manager
    where file_id = #{fileId,jdbcType=INTEGER}
  </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from file_manager
        where file_id = #{fileId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.lixin.testweb.github.vxinv.model.FileManagerExample">
        delete from file_manager
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.lixin.testweb.github.vxinv.model.FileManager">
        insert into file_manager (file_id, file_name, file_time,
                                  user_name, file_key, file_size,
                                  file_class, file_second_class)
        values (#{fileId,jdbcType=INTEGER}, #{fileName,jdbcType=VARCHAR}, #{fileTime,jdbcType=TIMESTAMP},
                #{userName,jdbcType=VARCHAR}, #{fileKey,jdbcType=VARCHAR}, #{fileSize,jdbcType=INTEGER},
                #{fileClass,jdbcType=VARCHAR}, #{fileSecondClass,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.lixin.testweb.github.vxinv.model.FileManager">
        insert into file_manager
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="fileId != null">
                file_id,
            </if>
            <if test="fileName != null">
                file_name,
            </if>
            <if test="fileTime != null">
                file_time,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="fileKey != null">
        file_key,
      </if>
      <if test="fileSize != null">
        file_size,
      </if>
      <if test="fileClass != null">
        file_class,
      </if>
      <if test="fileSecondClass != null">
        file_second_class,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fileId != null">
        #{fileId,jdbcType=INTEGER},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileTime != null">
        #{fileTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="fileKey != null">
        #{fileKey,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        #{fileSize,jdbcType=INTEGER},
      </if>
      <if test="fileClass != null">
        #{fileClass,jdbcType=VARCHAR},
      </if>
      <if test="fileSecondClass != null">
        #{fileSecondClass,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
    <select id="countByExample" parameterType="com.lixin.testweb.github.vxinv.model.FileManagerExample"
            resultType="java.lang.Long">
        select count(*) from file_manager
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
  <update id="updateByExampleSelective" parameterType="map">
    update file_manager
    <set>
      <if test="record.fileId != null">
        file_id = #{record.fileId,jdbcType=INTEGER},
      </if>
      <if test="record.fileName != null">
        file_name = #{record.fileName,jdbcType=VARCHAR},
      </if>
      <if test="record.fileTime != null">
        file_time = #{record.fileTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.fileKey != null">
        file_key = #{record.fileKey,jdbcType=VARCHAR},
      </if>
      <if test="record.fileSize != null">
        file_size = #{record.fileSize,jdbcType=INTEGER},
      </if>
      <if test="record.fileClass != null">
        file_class = #{record.fileClass,jdbcType=VARCHAR},
      </if>
      <if test="record.fileSecondClass != null">
        file_second_class = #{record.fileSecondClass,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update file_manager
    set file_id = #{record.fileId,jdbcType=INTEGER},
      file_name = #{record.fileName,jdbcType=VARCHAR},
      file_time = #{record.fileTime,jdbcType=TIMESTAMP},
      user_name = #{record.userName,jdbcType=VARCHAR},
      file_key = #{record.fileKey,jdbcType=VARCHAR},
      file_size = #{record.fileSize,jdbcType=INTEGER},
      file_class = #{record.fileClass,jdbcType=VARCHAR},
      file_second_class = #{record.fileSecondClass,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.lixin.testweb.github.vxinv.model.FileManager">
        update file_manager
        <set>
            <if test="fileName != null">
                file_name = #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="fileTime != null">
                file_time = #{fileTime,jdbcType=TIMESTAMP},
            </if>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="fileKey != null">
        file_key = #{fileKey,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        file_size = #{fileSize,jdbcType=INTEGER},
      </if>
      <if test="fileClass != null">
        file_class = #{fileClass,jdbcType=VARCHAR},
      </if>
      <if test="fileSecondClass != null">
        file_second_class = #{fileSecondClass,jdbcType=VARCHAR},
      </if>
    </set>
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.lixin.testweb.github.vxinv.model.FileManager">
        update file_manager
        set file_name         = #{fileName,jdbcType=VARCHAR},
            file_time         = #{fileTime,jdbcType=TIMESTAMP},
            user_name         = #{userName,jdbcType=VARCHAR},
            file_key          = #{fileKey,jdbcType=VARCHAR},
            file_size         = #{fileSize,jdbcType=INTEGER},
            file_class        = #{fileClass,jdbcType=VARCHAR},
            file_second_class = #{fileSecondClass,jdbcType=VARCHAR}
        where file_id = #{fileId,jdbcType=INTEGER}
    </update>
</mapper>
